{"ast":null,"code":"/* Store in the style of redux toolkit */\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nexport const ALLART = \"allArt\"; // Pass an array of art objects and create a new 2-D array of art objects\n// [artist's name][art object]\n\nfunction sort_by_artist(art) {\n  let sort_by_artist = [];\n\n  for (const i in art) {\n    if (!sort_by_artist[art[i].artist]) {\n      sort_by_artist[art[i].artist] = [];\n    }\n\n    sort_by_artist[art[i].artist].push(art[i]);\n  }\n\n  return sort_by_artist;\n}\n/**\r\n * Reducer for showing art on the main page\r\n */\n\n\nconst artInitialState = {\n  art: [],\n  favorites: []\n};\nconst artSlice = createSlice({\n  name: \"art\",\n  initialState: artInitialState,\n  reducers: {\n    // Get all art is sorted by artist as a default.\n    // Maybe this should be done on the server. Also this runs every time the page loads?\n    getAllArt(state, action) {\n      const sorted_by_artist = sort_by_artist(action.payload);\n      state.art = sorted_by_artist;\n    }\n\n  }\n});\n/**\r\n * End art reducer\r\n */\n\n/**\r\n * Reducer for showing favorites and handling favorites logic\r\n */\n\nconst favoriteInitialState = {\n  //art: [],\n  art: 'hello'\n};\nconst favoriteSlice = createSlice({\n  name: \"favorites\",\n  initialState: favoriteInitialState,\n  reducers: {\n    addFavorite(state, action) {},\n\n    removeFavorite(state, action) {},\n\n    itemIsFavorite(state, action) {},\n\n    getAllFavorites(state, action) {\n      state.art = 'faves';\n    }\n\n  }\n});\n/**\r\n * End favorite reducer\r\n */\n//const artStore = createStore(artReducer); old redux\n//const store = configureStore({ reducer: artSlice.reducer });\n\nconst store = configureStore({\n  reducer: {\n    art: artSlice.reducer,\n    favorites: favoriteSlice.reducer\n  }\n});\nexport const artActions = artSlice.actions;\nexport const favoriteActions = favoriteSlice.actions;\nexport default store;\n/*\r\n function artReducer(state = artInitialState, action) {\r\n  // This is the action type for showing all art (on page load)\r\n  if (action.type === \"allArt\") {\r\n    const sorted_by_artist = sort_by_artist(action.payload);\r\n    return {\r\n      art: sorted_by_artist,\r\n      favorites: state.favorites,\r\n    };\r\n  }\r\n\r\n  /* if(action.type === \"addFavorite\") {\r\n    const newFav = [...state.favorites];\r\n    newFave.push(action.payload);\r\n    return {\r\n      art: state.art,\r\n      favorites\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n */","map":{"version":3,"sources":["C:/Users/E/OneDrive/Documents/CS Classes and Programs/React/aesthetic-productions/client/src/store/index.js"],"names":["createSlice","configureStore","ALLART","sort_by_artist","art","i","artist","push","artInitialState","favorites","artSlice","name","initialState","reducers","getAllArt","state","action","sorted_by_artist","payload","favoriteInitialState","favoriteSlice","addFavorite","removeFavorite","itemIsFavorite","getAllFavorites","store","reducer","artActions","actions","favoriteActions"],"mappings":"AAAA;AAEA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,OAAO,MAAMC,MAAM,GAAG,QAAf,C,CAEP;AACA;;AACA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAID,cAAc,GAAG,EAArB;;AAEA,OAAK,MAAME,CAAX,IAAgBD,GAAhB,EAAqB;AACnB,QAAI,CAACD,cAAc,CAACC,GAAG,CAACC,CAAD,CAAH,CAAOC,MAAR,CAAnB,EAAoC;AAClCH,MAAAA,cAAc,CAACC,GAAG,CAACC,CAAD,CAAH,CAAOC,MAAR,CAAd,GAAgC,EAAhC;AACD;;AACDH,IAAAA,cAAc,CAACC,GAAG,CAACC,CAAD,CAAH,CAAOC,MAAR,CAAd,CAA8BC,IAA9B,CAAmCH,GAAG,CAACC,CAAD,CAAtC;AACD;;AACD,SAAOF,cAAP;AACD;AAED;AACA;AACA;;;AACA,MAAMK,eAAe,GAAG;AACtBJ,EAAAA,GAAG,EAAE,EADiB;AAEtBK,EAAAA,SAAS,EAAE;AAFW,CAAxB;AAIA,MAAMC,QAAQ,GAAGV,WAAW,CAAC;AAC3BW,EAAAA,IAAI,EAAE,KADqB;AAE3BC,EAAAA,YAAY,EAAEJ,eAFa;AAG3BK,EAAAA,QAAQ,EAAE;AACR;AACA;AACAC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvB,YAAMC,gBAAgB,GAAGd,cAAc,CAACa,MAAM,CAACE,OAAR,CAAvC;AACAH,MAAAA,KAAK,CAACX,GAAN,GAAYa,gBAAZ;AACD;;AANO;AAHiB,CAAD,CAA5B;AAYA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAME,oBAAoB,GAAG;AAC3B;AACAf,EAAAA,GAAG,EAAE;AAFsB,CAA7B;AAIA,MAAMgB,aAAa,GAAGpB,WAAW,CAAC;AAChCW,EAAAA,IAAI,EAAE,WAD0B;AAEhCC,EAAAA,YAAY,EAAEO,oBAFkB;AAGhCN,EAAAA,QAAQ,EAAE;AACRQ,IAAAA,WAAW,CAACN,KAAD,EAAQC,MAAR,EAAgB,CAAE,CADrB;;AAERM,IAAAA,cAAc,CAACP,KAAD,EAAQC,MAAR,EAAgB,CAAE,CAFxB;;AAGRO,IAAAA,cAAc,CAACR,KAAD,EAAQC,MAAR,EAAgB,CAAE,CAHxB;;AAIRQ,IAAAA,eAAe,CAACT,KAAD,EAAQC,MAAR,EAAgB;AAC7BD,MAAAA,KAAK,CAACX,GAAN,GAAY,OAAZ;AACD;;AANO;AAHsB,CAAD,CAAjC;AAYA;AACA;AACA;AAEA;AACA;;AAEA,MAAMqB,KAAK,GAAGxB,cAAc,CAAC;AAC3ByB,EAAAA,OAAO,EAAE;AAAEtB,IAAAA,GAAG,EAAEM,QAAQ,CAACgB,OAAhB;AAAyBjB,IAAAA,SAAS,EAAEW,aAAa,CAACM;AAAlD;AADkB,CAAD,CAA5B;AAIA,OAAO,MAAMC,UAAU,GAAGjB,QAAQ,CAACkB,OAA5B;AACP,OAAO,MAAMC,eAAe,GAAGT,aAAa,CAACQ,OAAtC;AAEP,eAAeH,KAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* Store in the style of redux toolkit */\r\n\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nexport const ALLART = \"allArt\";\r\n\r\n// Pass an array of art objects and create a new 2-D array of art objects\r\n// [artist's name][art object]\r\nfunction sort_by_artist(art) {\r\n  let sort_by_artist = [];\r\n\r\n  for (const i in art) {\r\n    if (!sort_by_artist[art[i].artist]) {\r\n      sort_by_artist[art[i].artist] = [];\r\n    }\r\n    sort_by_artist[art[i].artist].push(art[i]);\r\n  }\r\n  return sort_by_artist;\r\n}\r\n\r\n/**\r\n * Reducer for showing art on the main page\r\n */\r\nconst artInitialState = {\r\n  art: [],\r\n  favorites: [],\r\n};\r\nconst artSlice = createSlice({\r\n  name: \"art\",\r\n  initialState: artInitialState,\r\n  reducers: {\r\n    // Get all art is sorted by artist as a default.\r\n    // Maybe this should be done on the server. Also this runs every time the page loads?\r\n    getAllArt(state, action) {\r\n      const sorted_by_artist = sort_by_artist(action.payload);\r\n      state.art = sorted_by_artist;\r\n    },\r\n  },\r\n});\r\n/**\r\n * End art reducer\r\n */\r\n\r\n/**\r\n * Reducer for showing favorites and handling favorites logic\r\n */\r\nconst favoriteInitialState = {\r\n  //art: [],\r\n  art: 'hello'\r\n};\r\nconst favoriteSlice = createSlice({\r\n  name: \"favorites\",\r\n  initialState: favoriteInitialState,\r\n  reducers: {\r\n    addFavorite(state, action) {},\r\n    removeFavorite(state, action) {},\r\n    itemIsFavorite(state, action) {},\r\n    getAllFavorites(state, action) {\r\n      state.art = 'faves';\r\n    },\r\n  },\r\n});\r\n/**\r\n * End favorite reducer\r\n */\r\n\r\n//const artStore = createStore(artReducer); old redux\r\n//const store = configureStore({ reducer: artSlice.reducer });\r\n\r\nconst store = configureStore({\r\n  reducer: { art: artSlice.reducer, favorites: favoriteSlice.reducer },\r\n});\r\n\r\nexport const artActions = artSlice.actions;\r\nexport const favoriteActions = favoriteSlice.actions;\r\n\r\nexport default store;\r\n\r\n/*\r\n function artReducer(state = artInitialState, action) {\r\n  // This is the action type for showing all art (on page load)\r\n  if (action.type === \"allArt\") {\r\n    const sorted_by_artist = sort_by_artist(action.payload);\r\n    return {\r\n      art: sorted_by_artist,\r\n      favorites: state.favorites,\r\n    };\r\n  }\r\n\r\n  /* if(action.type === \"addFavorite\") {\r\n    const newFav = [...state.favorites];\r\n    newFave.push(action.payload);\r\n    return {\r\n      art: state.art,\r\n      favorites\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n */\r\n"]},"metadata":{},"sourceType":"module"}