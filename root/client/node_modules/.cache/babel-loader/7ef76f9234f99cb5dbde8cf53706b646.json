{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\E\\\\OneDrive\\\\Documents\\\\CS Classes and Programs\\\\React\\\\aesthetic-productions\\\\client\\\\src\\\\components\\\\layout\\\\Body.js\",\n    _s = $RefreshSig$();\n\n// Main.js parent\nimport Card from \"../../ui/Card\";\nimport Modal from \"../../ui/Modal\";\nimport SwiperUI from \"../../ui/SwiperUI\";\nimport classes from \"./Body.module.css\";\nimport { useState, useEffect, Fragment } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Body(props) {\n  _s();\n\n  const [isViewing, setIsViewing] = useState(false);\n  const [currentSrc, setCurrentSrc] = useState(\"\");\n  const [currentTitle, setCurrentTitle] = useState(\"\");\n\n  if (props.data_art) {\n    /* Sort art by artist @TODO make this a context so it doesn't run over and over\r\n    this is running over and over because the state is changing, duh \r\n    (when you open and close the modal, isViewing changes and reloads the component)\r\n    but also this is going in the redux store*/\n    let sort_by_artist = [];\n\n    for (const i in props.data_art) {\n      if (!sort_by_artist[props.data_art[i].artist]) {\n        sort_by_artist[props.data_art[i].artist] = [];\n      }\n\n      sort_by_artist[props.data_art[i].artist].push(props.data_art[i]);\n    }\n    /* End Sort art by artist */\n\n\n    console.log(sort_by_artist);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SwiperUI\n      /* art={sort_by_artist} */\n      , {\n        art: props.data_art,\n        setIsViewing: setIsViewing,\n        setCurrentSrc: setCurrentSrc,\n        setCurrentTitle: setCurrentTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), isViewing && /*#__PURE__*/_jsxDEV(Modal, {\n        setIsViewing: setIsViewing,\n        url: currentSrc,\n        title: currentTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"There was an issue with retrieving the art!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(Body, \"rFBCo81gQdrmmdf4hfylMLM6ufg=\");\n\n_c = Body;\nexport default Body;\n\nvar _c;\n\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"sources":["C:/Users/E/OneDrive/Documents/CS Classes and Programs/React/aesthetic-productions/client/src/components/layout/Body.js"],"names":["Card","Modal","SwiperUI","classes","useState","useEffect","Fragment","FontAwesomeIcon","Body","props","isViewing","setIsViewing","currentSrc","setCurrentSrc","currentTitle","setCurrentTitle","data_art","sort_by_artist","i","artist","push","console","log"],"mappings":";;;AAAA;AAEA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA8C,OAA9C;AAEA,SAASC,eAAT,QAAgC,gCAAhC;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;;AAEA,MAAIK,KAAK,CAACO,QAAV,EAAoB;AAClB;AACJ;AACA;AACA;AACI,QAAIC,cAAc,GAAG,EAArB;;AAEA,SAAK,MAAMC,CAAX,IAAgBT,KAAK,CAACO,QAAtB,EAAgC;AAC9B,UAAI,CAACC,cAAc,CAACR,KAAK,CAACO,QAAN,CAAeE,CAAf,EAAkBC,MAAnB,CAAnB,EAA+C;AAC7CF,QAAAA,cAAc,CAACR,KAAK,CAACO,QAAN,CAAeE,CAAf,EAAkBC,MAAnB,CAAd,GAA2C,EAA3C;AACD;;AACDF,MAAAA,cAAc,CAACR,KAAK,CAACO,QAAN,CAAeE,CAAf,EAAkBC,MAAnB,CAAd,CAAyCC,IAAzC,CAA8CX,KAAK,CAACO,QAAN,CAAeE,CAAf,CAA9C;AACD;AACD;;;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYL,cAAZ;AAEA,wBACE,QAAC,QAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC;AACC;AADF;AAEE,QAAA,GAAG,EAAER,KAAK,CAACO,QAFb;AAGE,QAAA,YAAY,EAAEL,YAHhB;AAIE,QAAA,aAAa,EAAEE,aAJjB;AAKE,QAAA,eAAe,EAAEE;AALnB;AAAA;AAAA;AAAA;AAAA,cAFF,EASGL,SAAS,iBACR,QAAC,KAAD;AACE,QAAA,YAAY,EAAEC,YADhB;AAEE,QAAA,GAAG,EAAEC,UAFP;AAGE,QAAA,KAAK,EAAEE;AAHT;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD,GApCD,MAoCO;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF;;GA7CQN,I;;KAAAA,I;AA+CT,eAAeA,IAAf","sourcesContent":["// Main.js parent\r\n\r\nimport Card from \"../../ui/Card\";\r\nimport Modal from \"../../ui/Modal\";\r\nimport SwiperUI from \"../../ui/SwiperUI\";\r\n\r\nimport classes from \"./Body.module.css\";\r\n\r\nimport { useState, useEffect, Fragment } from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nfunction Body(props) {\r\n\r\n  const [isViewing, setIsViewing] = useState(false);\r\n  const [currentSrc, setCurrentSrc] = useState(\"\");\r\n  const [currentTitle, setCurrentTitle] = useState(\"\");\r\n\r\n  if (props.data_art) {\r\n    /* Sort art by artist @TODO make this a context so it doesn't run over and over\r\n    this is running over and over because the state is changing, duh \r\n    (when you open and close the modal, isViewing changes and reloads the component)\r\n    but also this is going in the redux store*/\r\n    let sort_by_artist = [];\r\n\r\n    for (const i in props.data_art) {\r\n      if (!sort_by_artist[props.data_art[i].artist]) {\r\n        sort_by_artist[props.data_art[i].artist] = [];\r\n      }\r\n      sort_by_artist[props.data_art[i].artist].push(props.data_art[i]);\r\n    }\r\n    /* End Sort art by artist */\r\n\r\n    console.log(sort_by_artist);\r\n\r\n    return (\r\n      <Fragment>\r\n        <br />\r\n        <SwiperUI\r\n          /* art={sort_by_artist} */\r\n          art={props.data_art}\r\n          setIsViewing={setIsViewing}\r\n          setCurrentSrc={setCurrentSrc}\r\n          setCurrentTitle={setCurrentTitle}\r\n        />\r\n        {isViewing && (\r\n          <Modal\r\n            setIsViewing={setIsViewing}\r\n            url={currentSrc}\r\n            title={currentTitle}\r\n          />\r\n        )}\r\n      </Fragment>\r\n    );\r\n  } else {\r\n    return <div>There was an issue with retrieving the art!</div>;\r\n  }\r\n}\r\n\r\nexport default Body;\r\n"]},"metadata":{},"sourceType":"module"}